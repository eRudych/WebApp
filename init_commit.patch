Index: src/main/java/db/InteractDB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/db/InteractDB.java	(revision fa33e484e012dc411216a357a3cc1b8a4e517321)
+++ src/main/java/db/InteractDB.java	(date 1561325613267)
@@ -2,190 +2,194 @@
 
 import app.entities.Product;
 
+import javax.sql.rowset.CachedRowSet;
 import java.sql.*;
 
-public  class InteractDB implements Interact {
+public class InteractDB implements Interact {
     /**
      *
      */
     private static InteractDB ourInstance = new InteractDB();
-  //  private static BdLogic logic;
-    String userName;
-    String pass;
-    Connection connection;
-    Statement statement;
-    String connectionUrl = "jdbc:mysql://localhost:3306/cash_machine";
+    private String userName;
+    private String pass;
+    private Connection connection;
+    private Statement statement;
+    private String connectionUrl = "jdbc:mysql://localhost:3306/cash_machine";
+    public static final String ROWSET_IMPL_CLASS = "com.sun.rowset.CachedRowSetImpl";
+    private CachedRowSet cachedRowSet;
+
     public static InteractDB getInstance() {
         return ourInstance;
     }
 
-    protected InteractDB() {
-      //  logic = new BdLogic();
+    private InteractDB() {
         userName = "root";
         pass = "root";
         try {
             connection = DriverManager.getConnection(connectionUrl, userName, pass);
             statement = connection.createStatement();
             Class.forName("com.mysql.jdbc.Driver");
-        } catch (SQLException e) {
-      //      logic.showException(e);
-            e.printStackTrace();
-        }
-        catch (ClassNotFoundException e) {
-     //       logic.showException(e);
+            Class c = Class.forName(ROWSET_IMPL_CLASS);
+            try {
+                cachedRowSet = (CachedRowSet) c.newInstance();
+            } catch (InstantiationException e) {
+                e.printStackTrace();
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
+            }
+            cachedRowSet.setUrl(connectionUrl);
+            cachedRowSet.setUsername(userName);
+            cachedRowSet.setPassword(pass);
+        } catch (SQLException | ClassNotFoundException e) {
             e.printStackTrace();
         }
     }
-
 
-    @Override
-    public void addProduct(Product product) {
-        String sqlCommandProduct = "INSERT INTO products VALUE ("+product.getCode()+",'"+product.getName()+"',"+product.getPrice()+");";
-        String sqlCommandStorage= "INSERT INTO storage_for_products (ProductCode) VALUES ("+product.getCode()+");";
+    boolean setSQLCommandCached(String sqlCommand) {
         try {
-            statement.executeUpdate(sqlCommandProduct);
-            statement.executeUpdate(sqlCommandStorage);
-            System.out.println(product.getCode()+" "+product.getName());
+            cachedRowSet.setCommand(sqlCommand);
+            cachedRowSet.execute();
         } catch (SQLException e) {
-     //       logic.showException(e);
             e.printStackTrace();
+            return false;
         }
+        return true;
     }
-
-    @Override
-    public void remove(Object o) {
-
-    }
-
-    @Override
-    public void update(Object o) {
-
-    }
 
     @Override
-    public void select(Object o) {
-
+    public boolean addProduct(Product product) {
+        String sqlCommandProduct = "INSERT INTO products VALUE (" + product.getCode() + ",'" + product.getName() + "'," + product.getPrice() + ");";
+        String sqlCommandStorage = "INSERT INTO storage_for_products (ProductCode) VALUES (" + product.getCode() + ");";
+        return (setSQLCommandCached(sqlCommandProduct) && setSQLCommandCached(sqlCommandStorage));
     }
+
 
     @Override
-    public void setQuantity(int amount,int code) {
-        String sqlCommandStorage= "UPDATE storage_for_products SET Amount="+amount+" WHERE ProductCode="+code+";";
-        System.out.println(amount+" "+code);
-        try {
-            statement.executeUpdate(sqlCommandStorage);
-        } catch (SQLException e) {
-            //       logic.showException(e);
-            e.printStackTrace();
-        }
+    public boolean setQuantity(int amount, int code) {
+        String sqlCommandStorage = "UPDATE storage_for_products SET Amount=" + amount + " WHERE ProductCode=" + code + ";";
+        return setSQLCommandCached(sqlCommandStorage);
     }
 
 
     @Override
     public int createCheck(int idCashier) {
-        int id=getMaxIdForChecks();
-        String sqlCommandSelectAll= "SELECT * FROM checks;";
-        try {
-            String sqlCommandAddCheck= "INSERT INTO checks (IdCashier) VALUES ("+idCashier+");";
-            statement.executeUpdate(sqlCommandAddCheck);
-        } catch (SQLException e) {
-            //       logic.showException(e);
-            e.printStackTrace();
-        }
+        String sqlCommandAddCheck = "INSERT INTO checks (IdCashier) VALUES (" + idCashier + ");";
+        setSQLCommandCached(sqlCommandAddCheck);
+        int id = getMaxIdForChecks();
+        System.out.println("hrrr" + id);
         return id;
     }
 
     @Override
-    public void addProduct(int code, int amount,int id) {
-        Savepoint savepoint=null;
-        String sqlCommandAddCheck= "SELECT Amount FROM storage_for_products WHERE ProductCode="+code+";";
-        try {
-            connection.setAutoCommit(false);
-            savepoint = connection.setSavepoint("Savepoint");
-            ResultSet resultSet = statement.executeQuery(sqlCommandAddCheck);
-            int amountStorage=0;
+    public boolean addProduct(ResultSet resultSet, int code, int amount, int id) {
+        int amountStorage = 0;
+        try {
             while (resultSet.next()) {
                 amountStorage = resultSet.getInt("Amount");
             }
             System.out.println(amountStorage);
-            if(amount>amountStorage){
-                amount=amountStorage;
+            if (amount > amountStorage) {
+                amount = amountStorage;
             }
-            amountStorage-=amount;
+            amountStorage -= amount;
             System.out.println(amountStorage);
-            String sqlCommandModyAmount= "UPDATE storage_for_products SET Amount="+amountStorage+" WHERE ProductCode="+code+";";
+            String sqlCommandModyAmount = "UPDATE storage_for_products SET Amount=" + amountStorage + " WHERE ProductCode=" + code + ";";
             statement.executeUpdate(sqlCommandModyAmount);
-            String sqlCommandAddProduct= "INSERT INTO check_contents VALUE ("+id+","+code+","+amount+");";
+            String sqlCommandAddProduct = "INSERT INTO check_contents VALUE (" + id + "," + code + "," + amount + ");";
             statement.executeUpdate(sqlCommandAddProduct);
             connection.commit();
+        } catch (SQLException ex) {
+            ex.printStackTrace();
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public ResultSet allProducts() {
+        String sqlCommandSelectProducts="SELECT storage.Amount, storage.ProductCode, product.ProductName as ProductName\n" +
+                "    FROM storage_for_products storage\n" +
+                "    INNER JOIN products product ON storage.ProductCode =product.Code";
+        ResultSet resultSet =null;
+        try {
+            resultSet = statement.executeQuery(sqlCommandSelectProducts);
+        } catch (SQLException e) {
+            e.printStackTrace();
+        }
+        return resultSet;
+    }
+
+    @Override
+    public boolean addProduct(int code, int amount, int id) {
+        Savepoint savepoint = null;
+        System.out.println("this" + id);
+        String sqlCommandSelectAmount = "SELECT Amount FROM storage_for_products WHERE ProductCode=" + code + ";";
+        try {
+            connection.setAutoCommit(false);
+            savepoint = connection.setSavepoint("Savepoint");
+            cachedRowSet.setCommand(sqlCommandSelectAmount);
+            ResultSet resultSet = statement.executeQuery(sqlCommandSelectAmount);
+            addProduct(resultSet, code, amount, id);
+
         } catch (SQLException e) {
             e.printStackTrace();
             try {
                 connection.rollback(savepoint);
+                return false;
             } catch (SQLException ex) {
                 ex.printStackTrace();
             }
         }
-
+        return true;
     }
 
     @Override
-    public void addProduct(String name, int amount, int id) {
-        Savepoint savepoint=null;
+    public boolean addProduct(String name, int amount, int id) {
+        Savepoint savepoint = null;
 
         try {
             connection.setAutoCommit(false);
-            String sqlCommandSearchProductCode="SELECT Code FROM products WHERE ProductName='"+name+"'";
+            String sqlCommandSearchProductCode = "SELECT Code FROM products WHERE ProductName='" + name + "'";
             ResultSet resultSet = statement.executeQuery(sqlCommandSearchProductCode);
-            int code=0;
+            int code = 0;
             while (resultSet.next()) {
                 code = resultSet.getInt("Code");
             }
-            String sqlCommandAddCheck= "SELECT Amount FROM storage_for_products WHERE ProductCode="+code+";";
+            String sqlCommandAddCheck = "SELECT Amount FROM storage_for_products WHERE ProductCode=" + code + ";";
             savepoint = connection.setSavepoint("Savepoint");
             resultSet = statement.executeQuery(sqlCommandAddCheck);
-            int amountStorage=0;
-            while (resultSet.next()) {
-                amountStorage = resultSet.getInt("Amount");
-            }
-            System.out.println(amountStorage);
-            if(amount>amountStorage){
-                amount=amountStorage;
-            }
-            amountStorage-=amount;
-            System.out.println(amountStorage);
-            String sqlCommandModyAmount= "UPDATE storage_for_products SET Amount="+amountStorage+" WHERE ProductCode="+code+";";
-            statement.executeUpdate(sqlCommandModyAmount);
-            String sqlCommandAddProduct= "INSERT INTO check_contents VALUE ("+id+","+code+","+amount+");";
-            statement.executeUpdate(sqlCommandAddProduct);
-            connection.commit();
+            addProduct(resultSet, code, amount, id);
         } catch (SQLException e) {
             e.printStackTrace();
             try {
                 connection.rollback(savepoint);
+                return false;
             } catch (SQLException ex) {
                 ex.printStackTrace();
             }
         }
+        return true;
     }
 
     @Override
     public int getMaxIdForChecks() {
-        int id=0;
-        String sqlCommandSelectAll= "SELECT * FROM checks ORDER BY Id;";
-        ResultSet resultSet = null;
+        int id = 0;
+        String sqlCommandSelectAllFromCheck = "SELECT * FROM checks ORDER BY Id;";
         try {
-            resultSet = statement.executeQuery(sqlCommandSelectAll);
-            while (resultSet.next()) {
-                id = resultSet.getInt("Id");
+            cachedRowSet.setCommand(sqlCommandSelectAllFromCheck);
+            while (cachedRowSet.next()) {
+                id = cachedRowSet.getInt("Id");
             }
+            cachedRowSet.execute();
         } catch (SQLException e) {
             e.printStackTrace();
-        }
-        return id;
+        } finally {
+            return id;
+        }
     }
 
     @Override
-    public void selectSeniorCashier(int id){
+    public void selectSeniorCashier(int id) {
 
     }
 
@@ -195,25 +199,47 @@
     }
 
     @Override
-    public void removeCheck(int idCheck) {
-        String sqlCommandRemoveFromChecks= "DELETE FROM checks WHERE Id="+idCheck+"";
-        String sqlCommandRemoveFromCheckContents= "DELETE FROM check_contents WHERE IdCheck="+idCheck+"";
-        Savepoint savepoint=null;
+    public boolean removeCheck(int idCheck) {
+        String sqlCommandRemoveFromChecks = "DELETE FROM checks WHERE Id=" + idCheck + "";
+        String sqlCommandRemoveFromCheckContents = "DELETE FROM check_contents WHERE IdCheck=" + idCheck + "";
+        Savepoint savepoint = null;
         try {
-            savepoint= connection.setSavepoint("Savepoint");
+            savepoint = connection.setSavepoint("Savepoint");
             connection.setAutoCommit(false);
-            statement.executeUpdate(sqlCommandRemoveFromCheckContents);
-            statement.executeUpdate(sqlCommandRemoveFromChecks);
+            setSQLCommandCached(sqlCommandRemoveFromCheckContents);
+            setSQLCommandCached(sqlCommandRemoveFromChecks);
             connection.commit();
         } catch (SQLException e) {
+            e.printStackTrace();
             try {
                 connection.rollback(savepoint);
+                return false;
+            } catch (SQLException ex) {
+                ex.printStackTrace();
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public boolean removeProduct(int idCheck, int idProduct) {
+        String sqlCommandRemoveFromCheckContents = "DELETE FROM check_contents WHERE IdCheck=" + idCheck + " && ProductCode=" + idProduct + "";
+        Savepoint savepoint = null;
+        try {
+            savepoint = connection.setSavepoint("Savepoint");
+            connection.setAutoCommit(false);
+            setSQLCommandCached(sqlCommandRemoveFromCheckContents);
+            connection.commit();
+        } catch (SQLException e) {
+            try {
+                connection.rollback(savepoint);
+                return false;
             } catch (SQLException ex) {
                 ex.printStackTrace();
             }
             e.printStackTrace();
         }
-
+        return true;
     }
 
 }
Index: src/main/java/db/Interact.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/db/Interact.java	(revision fa33e484e012dc411216a357a3cc1b8a4e517321)
+++ src/main/java/db/Interact.java	(date 1561325613169)
@@ -8,10 +8,15 @@
      boolean addProduct(Product product);
      boolean setQuantity(int amount, int code);
      int createCheck(int idCashier);
-     void addProduct(int code, int amount, int id);
-     void addProduct(String name, int amount, int id);
+
+     boolean addProduct(ResultSet resultSet, int code, int amount, int id);
+     ResultSet allProducts();
+     boolean addProduct(int code, int amount, int id);
+     boolean addProduct(String name, int amount, int id);
      int getMaxIdForChecks();
      void selectSeniorCashier(int id);
      void addingToDocumentation(int numberOperation);
-     void removeCheck(int idCheck);
+     boolean removeCheck(int idCheck);
+
+     boolean removeProduct(int idCheck, int idProduct);
 }
diff --git out/artifacts/WebApp_war_exploded/WEB-INF/classes/app/servlets/senior_cashier/CanselProduct.class out/artifacts/WebApp_war_exploded/WEB-INF/classes/app/servlets/senior_cashier/CanselProduct.class
deleted file mode 100644
index 830cc85692f165e881b98e06786be664a377eb0d..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git out/artifacts/WebApp_war_exploded/WEB-INF/classes/db/InteractBd.class out/artifacts/WebApp_war_exploded/WEB-INF/classes/db/InteractBd.class
deleted file mode 100644
index 3ff765f5808b7ebd61330e11e6331fd6406f2ee0..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git target/classes/app/servlets/senior_cashier/CanselProduct.class target/classes/app/servlets/senior_cashier/CanselProduct.class
deleted file mode 100644
index 830cc85692f165e881b98e06786be664a377eb0d..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git target/classes/db/InteractBd.class target/classes/db/InteractBd.class
deleted file mode 100644
index 3ff765f5808b7ebd61330e11e6331fd6406f2ee0..0000000000000000000000000000000000000000
GIT binary patch
literal 0
Hc$@<O00001

diff --git out/artifacts/WebApp_war_exploded/WEB-INF/classes/db/CashierInteract.class out/artifacts/WebApp_war_exploded/WEB-INF/classes/db/CashierInteract.class
index 677777e4ba83c4070a6fa0be234aa4797f302b55..e5f60975b9b707bcfb2282cc8a9ed090c4dab816
GIT binary patch
literal 905
zc${@n%Wl&^6g}fSoWw3|+CYJ}JX#)33XPE1rD8!)B}?WZr7BW)6MK|QNygH|L3|V&
zHUY8V1NbP!orzl@A+~hp&Yd&&oO|czukSwqJjYQD72K=gKK2b97<gddp@By(9=iw_
z%Ewa4>;*$1Xr3_?yJ;dA)+4FJo9VbO^eOL;D6<)*F&~|AEzLep7PFz8Ff^j1-|q6s
zPzoKYOlTfw9R@Gff@h*T6!8b*24OQ~sLCW~GBDcLc#^!+X)=v7G82ShXl=ySMwyS(
zsiFf%CJfs_biqIJ_K2%NyO(LH2A!O)_}F?}I%lX4ME0703X_vmTPqXWtC8-dQyq&F
zX<BJ4_&+kGd{j|$(e%;6p^pvJeKhdIz*8T)*dxv5))_Yb_;}mD5GJ)oyi3BXmoyx*
z6{<<bRZQyjpc(x`=v)rtd}ZI~^o%aOvH411#wwvlyEd)NWLsaszEI%6CoJ1!0c(W*
zoPcXsr<Ix3^2^7>c4)19gR?V3;q$`%lD&Up&dKkaXcJpjwt?$;r5=j(1D>h0yEjAe
z{h}Gy7HiFESH(Okzh%!oY*Xae=q5!4D{$*S0*6MRv?NejA#fWzD+TCXbAf01AYBre
Tp}aVX>R+RDuSR*tvhMx{yd;q4

diff --git target/classes/db/SeniorCashierInteract.class target/classes/db/SeniorCashierInteract.class
index fa090d693c707a4e4795d0046392f6801a9f4695..34fe017a5021c4a8a81884ae54c98dc4c3bc6915
GIT binary patch
literal 572
zc${@mO;5r=5PeI5(gO0Oh@d9kz=OT$31gxd6Ou*`7)-n^Wdn<)P1?f$@}kCrKfoVl
zoGpkFbq_OdX5M=<+4qmvHvq@jH<7}oi7ixB*w#_gvBQu)m7a{w7_?@q&yei+L%~q6
zr6;au(}4(X`M{-4+4ddo_IV&xy=*3<u?!jN_HbbJgeU!=!^5!@LD!2!z@4bgPzi-A
zoM>%K%4S!sOUNMu>oQ~mG4<!7GZxMRgW2<Efg`S@T2lYh`DnuDJcl%N9rYX<*v+AY
zJ%-wUw=fiy#&WqgvTg<wp;~!je-SP(=#G(yx?UJ@&!N?&X3Jh9v=^7(;{ZwePxUk~
zbp^!?RTgDNId%99_DCQBgJL>vYA`A076fDofp8uhOYup}$8TXO7FHL-rBI;)it)bE
j%Ho_jie<bY(RhM(_ibgy1D$A@A9lvd&RE%%V@>4~B^G7G

diff --git out/artifacts/WebApp_war_exploded/WEB-INF/classes/db/merchandise/MerchandiseInteract.class out/artifacts/WebApp_war_exploded/WEB-INF/classes/db/merchandise/MerchandiseInteract.class
index ea9aed2cfcbeabd07f92408f22d5d8cc17762c6a..dab6e07675625b4fb8a123a7cefba70a83595b52
GIT binary patch
literal 830
zc$|e&+iuf95IvilspF8Oh0xLhZE1@G5*89~K}cMLWXarGRHVLb>{Yv!vkvweiNAuE
zfOy~o_$b8e#%;M&U`w;>*>ldEnf3P{U%vskkD&_(Yc8(gx(PQ-ST|wA!KQ<o46O%J
zN&S$a?hp4F8c(uBFmxlS#EWt=7Wo@KPARh(Wie0pc`nU&m2BuESukux$vBvZJU-$o
zk%b7JpY21XMb2YAVsLqqyvnnrj5WiGAMxol5K2oeMG;g7BV)puo}dQjgBaR{(638w
z4n8n6{V+7d7N2CLA|4CLTx?ru^E9n^WOd*VqhtP_2gSQI*cC;Y>OEo2?PX;ii)YgG
zwR}zkcMZ+M1uQt&^018^4_(~yums=3GFBKi|33zXo-Lnpbr`%H9}AP}5bp%=^f6gJ
z6gpIe<|-yLeX{%;VDyja9aO_Ozy?}$_vUGU8QT<H`U+@ev^H;l2Kz*t8rl?FHtE8n
z=*<D>;3BQ`H=tLM9}&7n>%te*?#xhsdnVx812dqG6&cKdm5AB(v1n^A;Zh|Rp-wMx
zNp5v*hQ?odUE=ku-ufJQs^{V|)tH;UVyiK83zhP{s!NBIXJ~%>qtE^?eLAOoUbU#z
EpJ|PsZ2$lO

diff --git out/artifacts/WebApp_war_exploded/WEB-INF/classes/db/Interact.class out/artifacts/WebApp_war_exploded/WEB-INF/classes/db/Interact.class
index a76c04b229966a3d85e176a3996d5a82753bc5ed..e1384b5f35ad757af80d83b94538cf39d9dc7c4a
GIT binary patch
literal 499
zc${sJ%TmHH6o&tBRW1r5AUr|Y*bO_DI?Qwi#|w@NccDE4#nNJ$GWu#Rd;lNH@ifHC
z!YuMl&Y%3}Kl%84dj~Mau!^%P1_Cu11UD)PGG7Y}oSEEiU5a(6LrPsMOh%6a^_28&
zCUfakpzL^_srrhfri&H%PXZ;!8+iglXSS9*>88(-dq-&&={f0%XJ5!Dvc9Q6&l&x9
zSD@n9`+aK`$$06`wF=|qWUsWBq_5<Q7fcgn0<d4v$pds!ipXcDIAlqttB}+_-Ge}v
zCuWoT<TCNI4bLidn8X}R(I(mb9ff-|_r;$ds?C#3`7{k9V$q8=De3F;JRv&-3-`Mu
z(E5#iy;yUcihw`?`D&CnDoOyejEZ3u2Zlu)8rD#^=Z0m|@Ce6-Ewl|!EIT+g?B;&l
JsmFT({V#YabJhR=

diff --git target/classes/db/CashierInteract.class target/classes/db/CashierInteract.class
index 677777e4ba83c4070a6fa0be234aa4797f302b55..e5f60975b9b707bcfb2282cc8a9ed090c4dab816
GIT binary patch
literal 905
zc${@n%Wl&^6g}fSoWw3|+CYJ}JX#)33XPE1rD8!)B}?WZr7BW)6MK|QNygH|L3|V&
zHUY8V1NbP!orzl@A+~hp&Yd&&oO|czukSwqJjYQD72K=gKK2b97<gddp@By(9=iw_
z%Ewa4>;*$1Xr3_?yJ;dA)+4FJo9VbO^eOL;D6<)*F&~|AEzLep7PFz8Ff^j1-|q6s
zPzoKYOlTfw9R@Gff@h*T6!8b*24OQ~sLCW~GBDcLc#^!+X)=v7G82ShXl=ySMwyS(
zsiFf%CJfs_biqIJ_K2%NyO(LH2A!O)_}F?}I%lX4ME0703X_vmTPqXWtC8-dQyq&F
zX<BJ4_&+kGd{j|$(e%;6p^pvJeKhdIz*8T)*dxv5))_Yb_;}mD5GJ)oyi3BXmoyx*
z6{<<bRZQyjpc(x`=v)rtd}ZI~^o%aOvH411#wwvlyEd)NWLsaszEI%6CoJ1!0c(W*
zoPcXsr<Ix3^2^7>c4)19gR?V3;q$`%lD&Up&dKkaXcJpjwt?$;r5=j(1D>h0yEjAe
z{h}Gy7HiFESH(Okzh%!oY*Xae=q5!4D{$*S0*6MRv?NejA#fWzD+TCXbAf01AYBre
Tp}aVX>R+RDuSR*tvhMx{yd;q4

diff --git out/artifacts/WebApp_war_exploded/WEB-INF/classes/db/SeniorCashierInteract.class out/artifacts/WebApp_war_exploded/WEB-INF/classes/db/SeniorCashierInteract.class
index fa090d693c707a4e4795d0046392f6801a9f4695..34fe017a5021c4a8a81884ae54c98dc4c3bc6915
GIT binary patch
literal 572
zc${@mO;5r=5PeI5(gO0Oh@d9kz=OT$31gxd6Ou*`7)-n^Wdn<)P1?f$@}kCrKfoVl
zoGpkFbq_OdX5M=<+4qmvHvq@jH<7}oi7ixB*w#_gvBQu)m7a{w7_?@q&yei+L%~q6
zr6;au(}4(X`M{-4+4ddo_IV&xy=*3<u?!jN_HbbJgeU!=!^5!@LD!2!z@4bgPzi-A
zoM>%K%4S!sOUNMu>oQ~mG4<!7GZxMRgW2<Efg`S@T2lYh`DnuDJcl%N9rYX<*v+AY
zJ%-wUw=fiy#&WqgvTg<wp;~!je-SP(=#G(yx?UJ@&!N?&X3Jh9v=^7(;{ZwePxUk~
zbp^!?RTgDNId%99_DCQBgJL>vYA`A076fDofp8uhOYup}$8TXO7FHL-rBI;)it)bE
j%Ho_jie<bY(RhM(_ibgy1D$A@A9lvd&RE%%V@>4~B^G7G

diff --git target/classes/db/Interact.class target/classes/db/Interact.class
index a76c04b229966a3d85e176a3996d5a82753bc5ed..e1384b5f35ad757af80d83b94538cf39d9dc7c4a
GIT binary patch
literal 499
zc${sJ%TmHH6o&tBRW1r5AUr|Y*bO_DI?Qwi#|w@NccDE4#nNJ$GWu#Rd;lNH@ifHC
z!YuMl&Y%3}Kl%84dj~Mau!^%P1_Cu11UD)PGG7Y}oSEEiU5a(6LrPsMOh%6a^_28&
zCUfakpzL^_srrhfri&H%PXZ;!8+iglXSS9*>88(-dq-&&={f0%XJ5!Dvc9Q6&l&x9
zSD@n9`+aK`$$06`wF=|qWUsWBq_5<Q7fcgn0<d4v$pds!ipXcDIAlqttB}+_-Ge}v
zCuWoT<TCNI4bLidn8X}R(I(mb9ff-|_r;$ds?C#3`7{k9V$q8=De3F;JRv&-3-`Mu
z(E5#iy;yUcihw`?`D&CnDoOyejEZ3u2Zlu)8rD#^=Z0m|@Ce6-Ewl|!EIT+g?B;&l
JsmFT({V#YabJhR=

diff --git target/classes/db/merchandise/MerchandiseInteract.class target/classes/db/merchandise/MerchandiseInteract.class
index ea9aed2cfcbeabd07f92408f22d5d8cc17762c6a..dab6e07675625b4fb8a123a7cefba70a83595b52
GIT binary patch
literal 830
zc$|e&+iuf95IvilspF8Oh0xLhZE1@G5*89~K}cMLWXarGRHVLb>{Yv!vkvweiNAuE
zfOy~o_$b8e#%;M&U`w;>*>ldEnf3P{U%vskkD&_(Yc8(gx(PQ-ST|wA!KQ<o46O%J
zN&S$a?hp4F8c(uBFmxlS#EWt=7Wo@KPARh(Wie0pc`nU&m2BuESukux$vBvZJU-$o
zk%b7JpY21XMb2YAVsLqqyvnnrj5WiGAMxol5K2oeMG;g7BV)puo}dQjgBaR{(638w
z4n8n6{V+7d7N2CLA|4CLTx?ru^E9n^WOd*VqhtP_2gSQI*cC;Y>OEo2?PX;ii)YgG
zwR}zkcMZ+M1uQt&^018^4_(~yums=3GFBKi|33zXo-Lnpbr`%H9}AP}5bp%=^f6gJ
z6gpIe<|-yLeX{%;VDyja9aO_Ozy?}$_vUGU8QT<H`U+@ev^H;l2Kz*t8rl?FHtE8n
z=*<D>;3BQ`H=tLM9}&7n>%te*?#xhsdnVx812dqG6&cKdm5AB(v1n^A;Zh|Rp-wMx
zNp5v*hQ?odUE=ku-ufJQs^{V|)tH;UVyiK83zhP{s!NBIXJ~%>qtE^?eLAOoUbU#z
EpJ|PsZ2$lO

